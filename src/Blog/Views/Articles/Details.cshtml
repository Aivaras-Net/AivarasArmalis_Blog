@model Blog.Models.Article
@using Microsoft.AspNetCore.Identity
@using Blog.Models
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = Model.Title;
    var userId = UserManager.GetUserId(User);
    var canEditArticle = User.IsInRole("Admin") || (User.IsInRole("Writer") && Model.AuthorId == userId);
    var canVote = User.IsInRole("Admin") || User.IsInRole("Critic");
    var userVote = ViewBag.CurrentUserVote as Vote;
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-10 col-lg-8">
            <nav aria-label="breadcrumb" class="mb-4">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
                    <li class="breadcrumb-item"><a asp-controller="Articles" asp-action="Index">Articles</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Title</li>
                </ol>
            </nav>

            <article>
                <header class="mb-4">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h1 class="display-4 fw-bold mb-0">@Model.Title</h1>

                        <div class="d-flex align-items-center gap-2">
                            <!-- Voting Controls -->
                            <div class="text-center me-2">
                                <div class="d-flex align-items-center">
                                    @if (canVote)
                                    {
                                        <form asp-action="Vote" asp-route-id="@Model.Id" asp-route-isUpvote="true" method="post" class="me-2">
                                            <button type="submit" class="btn @(userVote?.IsUpvote == true ? "btn-success" : "btn-outline-success") btn-sm">
                                                <i class="bi bi-plus-lg"></i>
                                            </button>
                                        </form>
                                    }
                                    
                                    <span class="badge bg-@(Model.VoteScore > 0 ? "success" : Model.VoteScore < 0 ? "danger" : "secondary") rounded-pill fs-6">
                                        @Model.VoteScore
                                    </span>
                                    
                                    @if (canVote)
                                    {
                                        <form asp-action="Vote" asp-route-id="@Model.Id" asp-route-isUpvote="false" method="post" class="ms-2">
                                            <button type="submit" class="btn @(userVote?.IsUpvote == false ? "btn-danger" : "btn-outline-danger") btn-sm">
                                                <i class="bi bi-dash-lg"></i>
                                            </button>
                                        </form>
                                    }
                                </div>
                                
                                @if (canVote && userVote != null)
                                {
                                    <form asp-action="RemoveVote" asp-route-id="@Model.Id" method="post" class="mt-1">
                                        <button type="submit" class="btn btn-sm btn-link p-0">Clear vote</button>
                                    </form>
                                }
                            </div>

                            @if (canEditArticle)
                            {
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                                        id="articleActionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="bi bi-gear"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="articleActionDropdown">
                                        <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@Model.Id"><i
                                                    class="bi bi-pencil me-2"></i>Edit Article</a></li>
                                        <li><button type="button" class="dropdown-item text-danger" id="deleteArticleBtn">
                                            <i class="bi bi-trash me-2"></i>Delete Article</button></li>
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="d-flex align-items-center text-muted mb-4">
                        @if (Model.Author != null && !string.IsNullOrEmpty(Model.Author.ProfilePicturePath))
                        {
                            <img src="/@Model.Author.ProfilePicturePath" alt="@Model.Author.FirstName @Model.Author.LastName"
                                class="rounded-circle me-2" style="width: 40px; height: 40px; object-fit: cover;">
                        }
                        else
                        {
                            <div class="bg-light rounded-circle me-2 d-flex align-items-center justify-content-center"
                                style="width: 40px; height: 40px;">
                                <i class="bi bi-person"></i>
                            </div>
                        }
                        <div>
                            @if (Model.Author != null)
                            {
                                <span class="fw-medium">@Model.Author.FirstName @Model.Author.LastName</span>
                            }
                            <div class="small">
                                Published on @Model.PublishedDate.ToString("MMMM d, yyyy")
                                @if (Model.LastUpdated.HasValue)
                                {
                                    <span class="mx-1">â€¢</span>
                                    <span>Updated on @Model.LastUpdated.Value.ToString("MMMM d, yyyy")</span>
                                }
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Summary))
                    {
                        <div class="lead text-muted mb-4 fst-italic">
                            @Model.Summary
                        </div>
                    }
                </header>

                @if (!string.IsNullOrEmpty(Model.ImageUrl))
                {
                    <figure class="figure mb-5 w-100">
                        <img src="@Model.ImageUrl" class="figure-img img-fluid rounded shadow" alt="@Model.Title"
                            style="width: 100%; max-height: 500px; object-fit: cover;">
                        @if (!string.IsNullOrEmpty(Model.Title))
                        {
                            <figcaption class="figure-caption text-end">@Model.Title</figcaption>
                        }
                    </figure>
                }

                @if (!string.IsNullOrEmpty(Model.Content))
                {
                    <div class="article-content lead mb-5">
                        @Html.Raw(Model.Content)
                    </div>
                }
                else
                {
                    <div class="alert alert-light text-center mb-5">
                        <i class="bi bi-file-earmark-text display-4 d-block mb-3 text-muted"></i>
                        <p>This article has no content.</p>
                    </div>
                }

                <div class="d-flex justify-content-between border-top pt-4">
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left me-1"></i> Back to Articles
                    </a>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary" onclick="window.print()">
                            <i class="bi bi-printer me-1"></i> Print
                        </button>
                        <button class="btn btn-outline-primary" onclick="shareArticle()">
                            <i class="bi bi-share me-1"></i> Share
                        </button>
                    </div>
                </div>
            </article>
            
             <div class="comments-section mt-5 pt-4 border-top">
                <h3 class="mb-4">Comments</h3>
                
                @if (SignInManager.IsSignedIn(User) && (User.IsInRole("Admin") || User.IsInRole("Writer") || User.IsInRole("Commentator")))
                {
                    <div class="new-comment mb-4">
                        <form id="main-comment-form" asp-controller="Comments" asp-action="Create" method="post" 
                              data-ajax="true" 
                              data-ajax-method="post" 
                              data-ajax-success="handleMainCommentSuccess"
                              data-ajax-failure="handleAjaxError"
                              data-ajax-mode="replace">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="articleId" value="@Model.Id" />
                            <div class="mb-3">
                                <textarea class="form-control" name="content" rows="3" 
                                          placeholder="Share your thoughts..." required></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">Post Comment</button>
                        </form>
                    </div>
                }
                else if (SignInManager.IsSignedIn(User))
                {
                    <div class="alert alert-info mb-4">
                        You need the Commentator role to comment on articles. 
                        Please contact an administrator to request this role.
                    </div>
                }
                else
                {
                    <div class="alert alert-info mb-4">
                        <a asp-controller="Account" asp-action="Login" class="alert-link">Sign in</a> to leave a comment.
                    </div>
                }
                
                <div id="comments-container">
                    @await Component.InvokeAsync("ArticleComments", new { articleId = Model.Id })
                </div>
            </div>
        </div>
    </div>
</div>

@{
    ViewData["ModalId"] = "deleteConfirmationModal";
    ViewData["ModalTitle"] = "Delete Confirmation";
    ViewData["ModalBody"] = "";
    ViewData["ConfirmButtonText"] = "Delete";
    ViewData["ConfirmButtonClass"] = "btn-danger";
}
<partial name="_ModalPartial" />

@{
    ViewData["ModalId"] = "deleteArticleModal";
    ViewData["ModalTitle"] = "Delete Article";
    ViewData["ModalBody"] = $"<p>Are you sure you want to delete article <strong>{Model.Title}</strong>?</p><p>This action cannot be undone.</p>";
    ViewData["ConfirmButtonText"] = "Delete Article";
    ViewData["ConfirmButtonClass"] = "btn-danger";
}
<partial name="_ModalPartial" />

@section Scripts {
    <script>
        function shareArticle() {
            if (navigator.share) {
                navigator.share({
                    title: '@Model.Title',
                    text: '@(Model.Summary ?? "Check out this article!")',
                    url: window.location.href
                })
                    .catch(console.error);
            } else {
                // Fallback for browsers that don't support the Web Share API
                alert('Copy this link to share: ' + window.location.href);
            }
        }
        
        $(document).ready(function() {
            $('#deleteArticleBtn').on('click', function() {
                var deleteModal = new bootstrap.Modal(document.getElementById('deleteArticleModal'));
                deleteModal.show();
            });
            
            $(document).on('click', '#deleteArticleModal .confirm-action', function() {
                var form = $('<form></form>').attr({
                    method: 'post',
                    action: '@Url.Action("Delete", "Articles", new { id = Model.Id })'
                });
                
                form.append('@Html.AntiForgeryToken()');
                
                $('body').append(form);
                form.submit();
            });
            
            $(document).on('submit', '.delete-form', function(e) {
                e.preventDefault();
                
                var $form = $(this);
                var commentId = $form.data('comment-id');
                
                var commentText = '';
                var commentDate = '';
                
                var $comment = $('#comment-' + commentId);
                if ($comment.length) {
                    commentText = $comment.find('.comment-content p').first().text().trim();
                    commentDate = $comment.find('.text-muted small').first().text().trim();
                    
                    commentDate = commentDate.replace(/\(Edited\)/g, '').trim();
                    
                    if (commentText.length > 100) {
                        commentText = commentText.substring(0, 100) + '...';
                    }
                }
                
                var modalContent = '<p>Are you sure you want to delete this comment?</p>';
                modalContent += '<div class="mt-3 p-3 border rounded bg-light">';
                if (commentDate) {
                    modalContent += '<strong>Posted:</strong> ' + commentDate + '<br>';
                }
                modalContent += '<strong>Comment:</strong> "' + commentText + '"';
                modalContent += '</div>';
                
                $('#deleteConfirmationModal .modal-body').html(modalContent);
                
                $('#deleteConfirmationModal').data('form', $form);
                
                var deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
                deleteModal.show();
            });
            
            $(document).on('click', '#deleteConfirmationModal .confirm-action', function() {
                var $form = $('#deleteConfirmationModal').data('form');
                
                if (!$form) return;
                
                var deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmationModal'));
                deleteModal.hide();
                
                $.ajax({
                    url: $form.attr('action'),
                    type: 'POST',
                    data: $form.serialize(),
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    success: function(response) {
                        if (response && response.success) {
                            handleDeleteSuccess(response);
                        } else {
                            handleAjaxError(null, 'error', 'Unexpected response format');
                        }
                    },
                    error: function(xhr, status, error) {
                        handleAjaxError(xhr, status, error);
                    }
                });
            });
            
            // Edit comment
            $(document).on('click', '.edit-button', function() {
                var commentId = $(this).data('comment-id');
                $('#comment-content-' + commentId).hide();
                $('#edit-form-' + commentId).removeClass('d-none');
            });
            
            $(document).on('click', '.cancel-edit', function() {
                var commentId = $(this).data('comment-id');
                $('#edit-form-' + commentId).addClass('d-none');
                $('#comment-content-' + commentId).show();
            });
            
            $(document).on('click', '.reply-button', function() {
                var commentId = $(this).data('comment-id');
                var rootCommentId = $(this).data('root-comment-id');
                
                $('.reply-form').addClass('d-none');
                
                $('#reply-form-' + commentId).removeClass('d-none');
                
                $('#reply-form-' + commentId + ' form').attr('data-root-comment-id', rootCommentId);
            });
            
            $(document).on('click', '.cancel-reply', function() {
                var commentId = $(this).data('comment-id');
                $('#reply-form-' + commentId).addClass('d-none');
            });
            
            $(document).on('click', '.load-replies-button', function() {
                var commentId = $(this).data('comment-id');
                var $button = $(this);
                var $repliesContainer = $('#replies-' + commentId);
                
                if ($button.hasClass('active')) {
                    $repliesContainer.find('.replies').slideUp(function() {
                        $button.html('<i class="bi bi-chevron-down me-1"></i> Show replies (' + 
                            ($button.data('reply-count') || '0') + ')');
                        $button.removeClass('active');
                    });
                    return;
                }
                
                $button.addClass('active');
                
                if (!$button.data('reply-count')) {
                    $button.data('reply-count', $button.text().match(/\((\d+)\)/)?.[1] || '0');
                }
                
                var originalText = $button.html();
                $button.html('<i class="bi bi-hourglass-split me-1"></i> Loading...');
                
                $.ajax({
                    url: '@Url.Action("GetReplies", "Comments")',
                    data: { commentId: commentId },
                    type: 'GET',
                    success: function(result) {
                        $repliesContainer.html(result);
                        
                        $repliesContainer.find('.replies').hide().slideDown();
                        
                        $button.html('<i class="bi bi-chevron-up me-1"></i> Hide replies');
                        
                        $repliesContainer.find('.load-replies-button').each(function() {
                            var nestedCommentId = $(this).data('comment-id');
                            var count = $(this).text().match(/\((\d+)\)/)?.[1] || '0';
                            $(this).data('reply-count', count);
                        });
                    },
                    error: function() {
                        $button.html(originalText);
                        $button.removeClass('active');
                    }
                });
            });
        });
        
        function removeComment(commentId) {
            $('#comment-' + commentId).fadeOut(function() {
                $(this).remove();
            });
        }

        function refreshReplies(commentId) {
            $.ajax({
                url: '@Url.Action("GetReplies", "Comments")',
                data: { commentId: commentId },
                type: 'GET',
                success: function(result) {
                    $('#replies-' + commentId).html(result);
                }
            });
        }

        function findRootCommentId(commentId) {
            var currentElement = $('#comment-' + commentId);
            var rootId = commentId;
            
            while (currentElement.parent().closest('.comment').length > 0) {
                currentElement = currentElement.parent().closest('.comment');
                rootId = currentElement.attr('id').replace('comment-', '');
            }
            
            return rootId;
        }

        function handleMainCommentSuccess(response) {
            $('#main-comment-form textarea').val('');
            
            var $commentsContainer = $('#comments-container .comments-list');
            
            if ($commentsContainer.length === 0) {
                $('#comments-container').html('<div class="comments-list">' + response + '</div>');
            } else {
                $commentsContainer.prepend(response);
            }
            
            showNotification('Comment posted successfully', 'success');
        }

        function handleAjaxError(xhr, status, error) {
            console.error('AJAX error:', status, error);
            
            var errorMessage = 'An error occurred. Please try again.';
            
            if (xhr && xhr.responseJSON && xhr.responseJSON.message) {
                errorMessage = xhr.responseJSON.message;
            } else if (error) {
                errorMessage = error;
            }
            
            showNotification(errorMessage, 'danger');
        }

        function showNotification(message, type) {
            $('.ajax-notification').remove();
            
            var $notification = $('<div class="ajax-notification alert alert-' + type + ' alert-dismissible fade show" role="alert">' +
                message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                '</div>');
        
            $('.comments-section').prepend($notification);
            
            setTimeout(function() {
                $notification.alert('close');
            }, 5000);
        }

        function handleReplySuccess(response, status, xhr) {
            $('form[data-ajax-success="handleReplySuccess"] textarea').val('');
            
            $('.reply-form').addClass('d-none');
            
            var form = $('form[data-ajax-success="handleReplySuccess"]');
            var parentCommentId = form.find('input[name="parentCommentId"]').val();
            
            var rootCommentId = findRootCommentId(parentCommentId);
            
            var expandedReplies = storeExpandedState();
            
            $.ajax({
                url: '@Url.Action("GetReplies", "Comments")',
                data: { commentId: rootCommentId },
                type: 'GET',
                success: function(result) {
                    $('#replies-' + rootCommentId).html(result);
                    
                    restoreExpandedState(expandedReplies);
                    
                    var $rootRepliesContainer = $('#replies-' + rootCommentId);
                    var $loadButton = $rootRepliesContainer.find('.load-replies-button:first');
                    
                    if ($loadButton.length > 0 && !$loadButton.hasClass('active')) {
                        $loadButton.click();
                    }
                    
                    showNotification('Reply posted successfully', 'success');
                }
            });
        }

        function storeExpandedState() {
            var expandedReplies = [];
            $('.load-replies-button.active').each(function() {
                expandedReplies.push($(this).data('comment-id'));
            });
            return expandedReplies;
        }

        function restoreExpandedState(expandedReplies) {
            if (!expandedReplies || !expandedReplies.length) return;
            
            setTimeout(function() {
                expandedReplies.forEach(function(commentId) {
                    var $button = $('#replies-' + commentId + ' .load-replies-button:first');
                    if ($button.length > 0 && !$button.hasClass('active')) {
                        $button.click();
                    }
                });
            }, 100);
        }

        function handleEditSuccess(response) {
            var commentId = $(response).attr('id').replace('comment-', '');
            $('#comment-' + commentId).replaceWith(response);
            
            showNotification('Comment updated successfully', 'success');
        }

        function handleDeleteSuccess(response) {
            if (!response || !response.commentId) {
                console.error('Invalid delete response format', response);
                showNotification('Error deleting comment. Please try again.', 'danger');
                return;
            }
            
            var commentId = Number(response.commentId);
            
            var $comment = $('#comment-' + commentId);
            if (!$comment.length) {
                console.error('Comment element not found for ID:', commentId);
                return;
            }
            
            var isNested = $comment.parents('.comment').length > 0;
            
            if (isNested) {
                var rootCommentId = findRootCommentId(commentId);
                
                var expandedReplies = storeExpandedState();
                
                refreshReplies(rootCommentId);
                
                setTimeout(function() {
                    restoreExpandedState(expandedReplies);
                }, 300);
            } else {
                $comment.fadeOut(function() {
                    $(this).remove();
                });
            }
            
            showNotification('Comment deleted successfully', 'success');
        }
    </script>
}